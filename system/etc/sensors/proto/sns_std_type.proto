syntax = "proto2";
import "nanopb.proto";
message sns_std_suid {
  required fixed64 suid_low = 1;
  required fixed64 suid_high = 2;
}
message sns_std_attr_value {
  message data {
    option (nanopb_msgopt).no_unions = true;
    oneof value {
      sns_std_attr_value subtype = 1;
      string str = 2;
      float flt = 3;
      sfixed64 sint = 4;
      bool boolean = 5;
    }
  }
  repeated data values = 1;
}
message sns_std_attr {
  required int32 attr_id = 1;
  required sns_std_attr_value value = 2;
}
enum sns_std_error {
  option (nanopb_enumopt).long_names = false;
  /* No error occurred; success. */
  SNS_STD_ERROR_NO_ERROR = 0;
  /* Unfixable or internal error occurred. */
  SNS_STD_ERROR_FAILED = 1;
  /* This API is not supported or is not implemented. */
  SNS_STD_ERROR_NOT_SUPPORTED = 2;
  /* Message contains invalid data type,
   * e.g., unknown message ID, unknown registry group, or unexpected
   * Sensor UID. */
  SNS_STD_ERROR_INVALID_TYPE = 3;
  /* Catastrophic error; expect no further data */
  SNS_STD_ERROR_INVALID_STATE = 4;
  /* One or more argument values were outside of the valid range */
  SNS_STD_ERROR_INVALID_VALUE = 5;
  /* This operation is not available at this time */
  SNS_STD_ERROR_NOT_AVAILABLE = 6;
  /* This action was rejected due to the current policy settings */
  SNS_STD_ERROR_POLICY = 7;
}
enum sns_std_client_processor {
  option (nanopb_enumopt).long_names = false;
  SNS_STD_CLIENT_PROCESSOR_SSC = 0;
  SNS_STD_CLIENT_PROCESSOR_APSS = 1;
  SNS_STD_CLIENT_PROCESSOR_ADSP = 2;
  SNS_STD_CLIENT_PROCESSOR_MDSP = 3;
  SNS_STD_CLIENT_PROCESSOR_CDSP = 4;
}
