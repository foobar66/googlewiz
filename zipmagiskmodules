#!/bin/bash
# put into git on 20200325
# corrected bug found by XDA member droidvark
# added ssh keys for git

#======================================================================
# core variables

VERSION="$1"
EXPAPPS=0
NOMODULE=0
WIZ=0
SWVER="$VERSION"
CURR=$(pwd)
NAME=googlewiz
BASE=/home/philip/7t/magisk/modules
MODULE="$BASE/$NAME"
SRC=/home/philip/pro
SWSRC="$SRC/software-$SWVER"
MODULEZIP="/home/philip/Desktop/mm-$NAME.zip"
APNS=apns-conf.xml
APNS2=apns-conf2.xml

#======================================================================
# binaries

ECHO=/bin/echo
SUDO=/usr/bin/sudo
XMLSTARLET=/usr/bin/xmlstarlet
JQ=/usr/bin/jq
ZIP=/usr/bin/zip
TOUCH=/usr/bin/touch
FIND=/usr/bin/find
SED=/bin/sed
AWK=/usr/bin/awk
AAPT="/usr/bin/aapt"
GREP=/bin/grep
MKDIR=/bin/mkdir
CHMOD=/bin/chmod
TAR=/bin/tar
ADB=/usr/bin/adb
CP=/bin/cp
RM=/bin/rm
LS=/bin/ls
MV=/bin/mv
CAT=/bin/cat
WC=/usr/bin/wc

apkdump () {
    echo "$1:" $($AAPT dump badging "$1")
}

$ECHO -e "-- checking if binaries are available"

for i in $XMLSTARLET $JQ $ZIO $TOUCH $FIND $SED $AWK $GREP $MKDIR $CHMOD $TAR $ADB $CP $RM $SUDO $LS $MV $CAT $AAPT $WC; do
    if [ ! -e "$i" ]; then
        $ECHO "$i is missing"
        $ECHO "-- done"
        exit 1
    fi
done

#======================================================================
# process command line args

if [ $# -eq 0 ]; then
    $ECHO -e "usage: $0 <version> [apps] [nomodule] [wiz]"
    exit -1
fi

# arguments:
# apps: include apps inside the magisk module (instead of using /sdcard/modappsq.tar
# nomodule: build the module but do not create a magisk $ZIP file
# wiz: build the googlewiz variant of the module (removes apps which I paid for like Nova Prime)

for arg in "$@"; do
    if [ "$arg" == "apps" ]; then EXPAPPS=1; fi
    if [ "$arg" == "nomodule" ]; then NOMODULE=1; fi
    if [ "$arg" == "wiz" ]; then WIZ=1; fi
    # we just ignore other args
done

$ECHO -e "-- apps = $EXPAPPS, nomodule = $NOMODULE, wiz = $WIZ"

#======================================================================
# mount original OnePlus software images

# mount original software system, product, vendor partitions
# expects original software images in $SRC/software-$VERSION/output/*.img
# there should be a directory $SRC/software-XYZ/output/mnt with 3 subdirectories
# $SRC/software-XYZ/output/mnt/system
# $SRC/software-XYZ/output/mnt/vendor
# $SRC/software-XYZ/output/mnt/product
# partitions must be mounted read-only
$ECHO -e "-- mounting system, product, vendor partitions from $VERSION"
$SUDO mount -o loop -o ro $SRC/software-$1/output/system.img $SRC/software-$1/output/mnt/system 2>/dev/null
$SUDO mount -o loop -o ro $SRC/software-$1/output/vendor.img $SRC/software-$1/output/mnt/vendor 2>/dev/null
$SUDO mount -o loop -o ro $SRC/software-$1/output/product.img $SRC/software-$1/output/mnt/product 2>/dev/null

#======================================================================
# prerequisites

$ECHO -e "-- checking prerequisites"

$ECHO -e "\tchecking if module directories exist"
for i in $MODULE $MODULE/system; do
    if [ ! -d $i ]; then
        $ECHO -e "!! directory $i does not exist, exiting"
        exit 1
    fi
done

$ECHO -e "\tchecking if module files exist"
for i in $MODULE/install.sh $MODULE/module.prop $MODULE/post-fs-data.sh $MODULE/service.sh $MODULE/system.prop $MODULE/scriptwrapper; do
    if [ ! -f $i ]; then
        $ECHO -e "!! file $i does not exist, exiting"
        exit 1
    fi
done

$ECHO -e "\tchecking if $SRC/modappsq.tar exists"
if [ ! -f $SRC/modappsq.tar ]; then
    $ECHO -e "!! $SRC/modappsq.tar does not exist, exiting"
    exit 1
fi

$ECHO -e "\tchecking mount points for $SWSRC/product/output/mnt"
MTSYSTEM=$SWSRC/output/mnt/system
MTVENDOR=$SWSRC/output/mnt/vendor
MTPRODUC=$SWSRC/output/mnt/product
if [ ! -d $MTSYSTEM ]; then
    $ECHO -e "!! directory $MTSYSTEM does not exist, did you create it?"
    exit 1
fi
if [ ! -d $SRCVENDOR ]; then
    $ECHO -e "!! directory $MTVENDOR does not exist, did you create it?"
    exit 1
fi
if [ ! -d $SRCPRODUC ]; then
    $ECHO -e "!! directory $MTPRODUC does not exist, did you create it?"
    exit 1
fi
if [ "$($LS -A $MTSYSTEM | $WC -l)" -eq 0 ]; then
    $ECHO -e "!! directory $MTSYSTEM is empty, did you mount it?"
    exit 1
fi
if [ "$($LS -A $MTVENDOR | $WC -l)" -eq 0 ]; then
    $ECHO -e "!! directory $MTVENDOR is empty, did you mount it?"
    exit 1
fi
if [ "$($LS -A $MTPRODUC | $WC -l)" -eq 0 ]; then
    $ECHO -e "!! directory $MTPRODUC is empty, did you mount it?"
    exit 1
fi

#======================================================================
# version

$ECHO -e "-- generating new version number, populating in module.prop"
OLDVER=$($CAT $MODULE/module.prop | $GREP 'version=' | $SED 's/version=//g')
NEWVER=$(date +'%Y-%m-%d %H:%M')
# update the version number in the module.prop file
$SED -i -e "s/version=$OLDVER/version=$NEWVER/g" $MODULE/module.prop
$ECHO -e "\toldversion: $OLDVER"
$ECHO -e "\tnewversion: $NEWVER"

#======================================================================
# make sure we start "clean"

$ECHO -e "-- checking expansion for APKs"
$RM -f $MODULE/.expandapps
if [ $EXPAPPS -eq 1 ]; then
    $ECHO -e "\tAPKs will be expanded during module creation"
else
    $ECHO -e "\tAPKs will NOT be expanded during module creation (expanded from /sdcard/modappsq.tar)"
    $TOUCH $MODULE/.expandapps
fi 

#======================================================================
# cleanup

# system directory is 1 level deeper
SROOT=$MTSYSTEM/system
VROOT=$MTVENDOR
PROOT=$MTPRODUC

$ECHO "-- cleaning up old files"
$ECHO -e "\tremoving $MODULEZIP"
$RM -f $MODULEZIP
$ECHO -e "\tcleaning up junk files in $MODULE"
cd $MODULE
$FIND $MODULE -name '*~' -exec $RM -f {} \;
$FIND $MODULE -name '#*' -exec $RM -f {} \;

#======================================================================
# helper functions to optimize files (xml, json, proto, conf, rc, sh, idc, ini)

optimize_xml () {
    cd $1
    # optimizing all .xml files
    ~/bin/xml-optimize
    NUMFILES=$($FIND $1 -type f -name '*.xml' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .xml files in $TARGET"
}

optimize_json () {
    # optimize all .json files
    for i in $($FIND $1 -type f -name '*.json'); do
        ($JQ -c -M . $i > /tmp/opti.json) 2>/dev/null
        $CP /tmp/opti.json $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.json' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .json files in $1"
}

optimize_proto () {
    # optimize all .proto files
    for i in $($FIND $1 -type f -name '*.proto'); do
        $CAT $i | $SED 's/\/\/.*//g' | $SED '/^[[:space:]]*$/d' > /tmp/opti.proto
        $CP /tmp/opti.proto $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.proto' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .proto files in $1"
}

optimize_conf () {
    # optimize all .conf files
    for i in $($FIND $1 -type f -name '*.conf'); do
        $CAT $i | $GREP -v ^# | $SED 's/#.*//g' | $SED '/^[[:space:]]*$/d' | $SED 's/ = /=/g' > /tmp/opti.conf
        $CP /tmp/opti.conf $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.conf' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .conf files in $1"
}

optimize_rc () {
    # optimize all .rc files
    for i in $($FIND $1 -type f -name '*.rc'); do
        $CAT $i | $GREP -v ^# | $SED 's/#.*//g' | $SED '/^[[:space:]]*$/d' > /tmp/opti.rc
        $CP /tmp/opti.rc $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.rc' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .rc files in $1"
}

optimize_sh () {
    # optimize all .sh files
    for i in $($FIND $1 -type f -name '*.sh'); do
        $CAT $i | $GREP -v ^# | $SED 's/#.*//g' | $SED '/^[[:space:]]*$/d' > /tmp/opti.rc
        $CP /tmp/opti.rc $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.sh' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .sh files in $1"
}

optimize_idc () {
    # optimize all .idc files
    for i in $($FIND $1 -type f -name '*.idc'); do
        $CAT $i | $GREP -v ^# | $SED 's/#.*//g' | $SED '/^[[:space:]]*$/d' | $SED 's/ = /=/g' > /tmp/opti.idc
        $CP /tmp/opti.idc $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.idc' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .idc files in $1"
}

optimize_ini () {
    # optimize all .ini files
    for i in $($FIND $1 -type f -name '*.ini'); do
        $CAT $i | $GREP -v ^# | $SED 's/#.*//g' | $SED '/^[[:space:]]*$/d' | $SED 's/ = /=/g' > /tmp/opti.idc
        $CP /tmp/opti.idc $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.ini' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .ini files in $1"
}

optimize_kcm () {
    # optimize all .kcm files
    for i in $($FIND $1 -type f -name '*.kcm'); do
        $CAT $i | $GREP -v ^# | $SED '/^$/d' > /tmp/opti.kcm
        $CP /tmp/opti.kcm $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.kcm' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .kcm files in $1"
}

optimize_kl () {
    # optimize all .kl files
    for i in $($FIND $1 -type f -name '*.kl'); do
        $CAT $i | $GREP -v ^# | $SED 's/#.*//g' | $SED '/^[[:space:]]*$/d' | $SED 's/ = /=/g' > /tmp/opti.kl
        $CP /tmp/opti.kl $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.kl' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .kl files in $1"
}

optimize_sql () {
    # optimize all .sql files
    for i in $($FIND $1 -type f -name '*.sql'); do
        $CAT $i | cpp | $GREP -v ^# | $GREP -v ^-- | $SED '/^$/d' > /tmp/opti.sql
        $CP /tmp/opti.sql $i
    done
    NUMFILES=$($FIND $1 -type f -name '*.sql' | $WC -l)
    $ECHO -e "\toptimized $NUMFILES .sql files in $1"
}

#======================================================================
# helper function to copy files from original OnePlus software

# we need to copy using $SUDO as not all files are accessible in the mounted OnePlus SW images
copyfiles () {
    CUR=$(pwd)
    #$ECHO -e "\tcopying $3 files from $1 to $2"
    cd "$1"
    $SUDO $TAR cf - $($FIND . -type f -name "$3") | (cd "$2"; $TAR xf -)
    cd $CUR
}

#======================================================================
# start building module

$ECHO -e "-- building module: $MODULE"
$ECHO -e "\tremoving $MODULE/system/*"
# erase the whole system and recreate the basic structure
$RM -rf $MODULE/system/*

# /system/build.prop
# note that this does not work at run time
# although there is a modified /system/build.prop file it seems not to be taken into account
# we actually use the magisk system.prop file
# so this is "for reference only"
PFILE=build.prop
TARGET=$MODULE/system
# copy original $PFILE and remove comments and empty lines
$ECHO -e "\tgenerating $TARGET/$PFILE from $SROOT/$PFILE"
$SUDO $CAT $SROOT/$PFILE | $GREP -v ^# | $SED '/^$/d' | sort > $TARGET/$PFILE
~/7t/buildprop/gen $TARGET/$PFILE
$CP ~/7t/buildprop/$PFILE $TARGET/$PFILE
# create the modules system.prop file in the magisk module
$CP ~/7t/buildprop/extrabuildQ $MODULE/system.prop

#======================================================================
# start building module

$ECHO -e "-- creating $MODULE/system/product"
$MKDIR -p $MODULE/system/product
$ECHO -e "-- creating $MODULE/system/vendor"
$MKDIR -p $MODULE/system/vendor

#======================================================================
# executables for /system/xbin

SUB=system/xbin
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET
for i in androidauto apackages appc bash busybox cmp compall copyflash diff doperm dovl dss e2fsck e2fsck.static fdisk find freeze freeze fstrim ftsc gdisk gset hl hm hs idiff ipk ksettings lcpu lz4 mkappsq oena parted pps rb rmovl rsync sqlite3 strace sysro sysrw tune2fs unzip vacuum wellbeing xmlstarlet zip zipalign; do
    $CP ~/7t/bin/$i $TARGET
    $CHMOD 755 $TARGET/$i
done
NUMFILES=$($FIND $TARGET -type f | $WC -l)
$ECHO -e "\tcopied $NUMFILES files in system/xbin"

# and we also remove a few by making them empty files
for i in antradio_app pnx; do
    $RM -rf $TAGET/$i
    $TOUCH $TARGET/$i
    $CHMOD 755 $TARGET/$i
done

#======================================================================
# empty executables to override files in /system/bin

SUB=system/bin
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB (creating empty executables)"
$MKDIR -p $TARGET
for i in ATFWD-daemon OPDiagdataCopy OPDiagnoseservice OPNetlinkService asserttip atrace auditctl auto_brightness_log.sh bootstat br_app_data_service bugreport bugreportz caffe clatd debuggerd diag_socket_log engineer_shell.sh filebuilderd fsck_msdos heapprofd incident incident_helper incidentd iorapd migrate_legacy_obb_data.sh mmi_diag move_time_data.sh move_widevine_data.sh move_wifi_data.sh notify_traceur.sh newfs_msdos ntfs-3g ntfsfix oemlogkit opposensortest perfetto perfservice qvrservicetest qvrservicetest64 recovery-persist recovery-refresh rtspclient rtspserver schedtest sgdisk sigma_miracasthalservice simpleperf simpleperf_app_runner sload_f2fs statsd tombstoned traced traced_probes uiautomator update_engine update_engine_client vendor_cmd_tool viewcompiler vl53l1_iotest vr wfdservice wfdvndservice; do
    $TOUCH $TARGET/$i
done
NUMFILES=$($FIND $TARGET -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES (empty) files in $TARGET"

#======================================================================
# /system/framework

SUB=system/framework
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET
$CP ~/7t/framework/com.google.android.dialer.support.jar $TARGET
$CP ~/7t/framework/com.google.android.media.effects.jar $TARGET
$CP ~/7t/framework/com.google.vr.platform.jar $TARGET
$CP ~/7t/framework/com.google.widevine.software.drm.jar $TARGET
$CHMOD 644 $TARGET/*
NUMFILES=$($FIND $TARGET -type f | $WC -l)
$ECHO -e "\tcopied $NUMFILES files in $TARGET"

#======================================================================
# /system/lib64

SUB=system/lib64
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET
$CP ~/7t/libs/Q/libsketchology_native.so $TARGET
$CHMOD 644 $TARGET/*
NUMFILES=$($FIND $TARGET -type f | $WC -l)
$ECHO -e "\tcopied $NUMFILES files in $TARGET"

#======================================================================
# /system/media (sound files)

SUB=system/media
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET
cd $MODULE/system
$TAR xf ~/7t/sounds/modulemedia.tar
cd $MODULE
NUMFILES=$($FIND $TARGET -type f -name '*.ogg' | $WC -l)
$ECHO -e "\tcreated $NUMFILES (sound) files in $TARGET"


#======================================================================
# /system/usr

SUB=system/usr
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET


SUB1=hyphen-data
TARGET1=$TARGET/$SUB1
$MKDIR -p $TARGET1
for i in $($LS $MTSYSTEM/$SUB/$SUB1/ | $GREP -v -en-gb); do
    $TOUCH $TARGET1/$i
done
NUMFILES=$($FIND $TARGET1 -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES (empty) files in $SUB/$SUB1"

# first copy all keylayout files (only in next step some of them will be 'emptied')
copyfiles "$SROOT/usr" "$TARGET" '*.kl'

SUB2=keylayout
TARGET2=$TARGET/$SUB2
$MKDIR -p $TARGET2
for i in $($LS $MTSYSTEM/$SUB/$SUB2/ | $GREP Vendor_); do
    # remove copied file and replace by empty file
    $RM -f $TARGET2/$i
    $TOUCH $TARGET2/$i
done
NUMFILES=$($FIND $TARGET2 -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES (empty) files in $SUB/$SUB2"

$MKDIR -p $TARGET/share
$MKDIR -p $TARGET/share/zoneinfo
$CP ~/7t/zoneinfo/tzdata $TARGET/share/zoneinfo

copyfiles "$SROOT/usr" "$TARGET" '*.idc'
optimize_idc $TARGET/idc
copyfiles "$SROOT/usr" "$TARGET" '*.kcm'
optimize_kcm $TARGET/keychars
optimize_kl $TARGET/keylayout

#======================================================================

emptyapks () {
    TARGET=$MODULE/$1
    $MKDIR -p $TARGET
    CNT=0
    for i in $($ECHO -e "$2"); do
        # create the directory in $TARGET
        $MKDIR -p $TARGET/$i
        # put an "empty" apk file there X.apk where X is the same name as the directory
        $TOUCH $TARGET/$i/$i.apk
        CNT=$(( $CNT + 1 ))
    done
    $ECHO -e "-- generating $1 ($CNT empty APKs)"
}

#======================================================================
# APKs
# we create empty APK files for the APKs which we want to hide in all APK directories
# originally I tried to bind mount an empty file in service.sh but then
# for some reason multiple mounts are on top of eachother (weird) for /system/app

SUB=system/app
array="AntHalService ARCore_stub Backup BackupRestoreRemoteService BasicDreams BluetoothMidiService BookmarkProvider BTtestmode BuiltInPrintService Calculator CarrierDefaultApp CompanionDeviceManager CtsShimPrebuilt DeskClock EasterEgg_O2 EngineeringMode EngSpecialTest GooglePrintRecommendationService HTMLViewer LiveWallpapersPicker LogKitSdService Netflix_Activation Netflix_Stub NFCTestMode NVBackupUI OemAutoTestServer OEMLogKit OPAppUpgrader OPBackup OPBreathMode OPBugReportLite OPCommonLogTool OPFilemanager OPGamingSpace OPGeoIpTime OPIntelliService OPLiveWallpaper OPMmsLocationFramework OPPush OPScreenRecord OPSesAuthentication OPSoundTuner OPTelephonyDiagnoseManager OPTelephonyOptimization OPWallpaperResources PacProcessor PartnerBookmarksProvider PhotosOnline PlayAutoInstallConfig QColor Rftoolkit SdCardService SensorTestTool SimAppDialog SmscPlugger SoterService Traceur WAPPushManager WallpaperBackup WapiCertManage WifiRfTestApk oem_tcma"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/priv-app
array="BackupRestoreConfirmation CallLogBackup Contacts CtsShimPrivPrebuilt Dialer DynamicSystemInstallationService EmergencyInfo HotwordEnrollmentOKGoogleWCD9340 HotwordEnrollmentXGoogleWCD9340 Houston IFAAService InputDevices LocalTransport ManagedProvisioning MmsService OnePlusGallery ONS OPAppCategoryProvider OPCellBroadcastReceiver OPDeviceManager OPDeviceManagerProvider OPFaceUnlock OPMms OPSimContacts ProxyHandler RcsSDK SharedStorageBackup TagGoogle WfdService"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/product/app
array="CallFeaturesSetting colorservice com.qualcomm.qti.services.secureui ConfURIDialer datastatusnotification DeviceInfo Duo DynamicDDSService embms GoogleLocationHistory TTS imssettings LatinImeGoogle Music2 OPCarrierLocation PerformanceMode QdcmFF remoteSimLockAuthentication remotesimlockservice SimSettings talkback TmoEngMode uceShimService uimgbaservice uimlpaservice uimremoteclient uimremoteserver Videos"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/product/priv-app
array="AndroidAutoStub CarrierConfig ConfigUpdater daxService dpmserviceapp GoogleFeedback GooglePartnerSetup GoogleRestore ims OPAppLocker QAS_DVC_MSP seccamservice StorageManager WallpaperCropper"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/vendor/app
array="CACertService CneApp com.qualcomm.qti.improvetouch.service IWlanService pasrservice PowerOffAlarm"
emptyapks $SUB "$array" $DUMMYAPK

#======================================================================
# expand modappsq.tarfile
# the tar expansion first creates $MODULE/vendor/app
# we move the $MODULE/vendor/app to $MODULE/system/vendor/app
# system/vendor/app
# expand my own APKs

CUR=$(pwd)
cd $MODULE/
if [ "$EXPAPPS" -eq 1 ]; then
    $ECHO -e "-- expanding apps from $SRC/modappsq.tar"
    $TAR xf $SRC/modappsq.tar
    # tar expansion results in vendor/app, we move this into system/vendor/app
    $MV $MODULE/vendor/app/* $MODULE/system/vendor/app/
    $RM -rf $MODULE/vendor
fi
cd $CUR

#======================================================================
# /system/etc

SUB=system/etc
TARGET=$MODULE/$SUB
# note that the whole system/etc directory is wiped here !
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET

# first copy all *.{xml,proto,conf,json,rc} files which we either want to modify and/or optimize
copyfiles "$SROOT/etc" "$TARGET" '*.xml'
copyfiles "$SROOT/etc" "$TARGET" '*.proto'
copyfiles "$SROOT/etc" "$TARGET" '*.conf'
copyfiles "$SROOT/etc" "$TARGET" '*.json'
copyfiles "$SROOT/etc" "$TARGET" '*.rc'

# empty some files which we do not need
$TOUCH $TARGET/usb_drivers.iso
$TOUCH $TARGET/NOTICE.xml.gz

# and copy some files which we manually patched
$CP ~/7t/etc/*.xml $TARGET
$RM -rf $TARGET/apns-conf.xml $TARGET/apns-conf2.xml

# some simple patches
$CAT $SROOT/etc/permissions/platform.xml | $GREP -v oppo > $TARGET/permissions/platform.xml

# copy below files but first remove comment lines and empty lines
$CAT $SROOT/etc/preloaded-classes | $GREP -v ^# > $TARGET/preloaded-classes
$CAT $SROOT/etc/dirty-image-objects | $GREP -v ^# > $TARGET/dirty-image-objects
$SUDO $CAT $SROOT/etc/prop.default | $GREP -v ^# > $TARGET/prop.default
$CAT $SROOT/etc/ld.config.29.txt | $GREP -v ^# | $SED '/^$/d' > $TARGET/ld.config.29.txt
$CAT $SROOT/etc/public.libraries.txt | $GREP -v ^# | $SED '/^$/d' > $TARGET/public.libraries.txt
$CAT $SROOT/etc/vold.fstab | $GREP -v ^# | $SED '/^$/d' > $TARGET/vold.fstab


# init.d and services.d
$MKDIR -p $TARGET/init.d
$MKDIR -p $TARGET/services.d
$ECHO -e "\tgenerating init.d and services.d in $SUB"
NUMFILES=$($LS ~/7t/init.d/LS00* | $WC -l)
$ECHO -e "\tcopying $NUMFILES scripts to $SUB/init.d"
$CP ~/7t/init.d/LS00* $TARGET/init.d/
$CP ~/7t/init.d/googlewiz.sh $TARGET/init.d/
$RM -f $TARGET/init.d/LS00usbfastcharge
NUMFILES=$($LS ~/7t/init.d/LS99* | $WC -l)
$ECHO -e "\tcopying $NUMFILES scripts to $SUB/services.d"
$CP ~/7t/init.d/LS99* $TARGET/services.d/
#not sure why I disabled next line ... I edited the script to absolute minimum hides
#$RM -f $TARGET/services.d/LS99magiskhide
$CHMOD 755 $TARGET/init.d/*
$CHMOD 755 $TARGET/services.d/*

# hosts
$ECHO -e "\tcopying hosts files"
$CP ~/7t/hosts/* $TARGET
$CHMOD 644 $TARGET/hosts*
$CP $TARGET/hosts.medium $TARGET/hosts
NUMFILES=$($FIND $TARGET -name 'hosts*' | $WC -l)
$ECHO -e "\tcreated $NUMFILES 'hosts' files in $TARGET"

if [ "$WIZ" == 0 ]; then
    # modified APN file
    # note that to create an orig we need to copy from the original source file in $SROOT
    # note that upon the first setup sequence we use the oneplus standard software
    # that still has the base software and original APN files with the proxy/port for Base and BASE MMS (!!!)
    # so you still need to go in manually in the settings and change the APN
    $CP ~/7t/etc/$APNS $TARGET
    $ECHO -e "\tcopied simplified $APNS to $TARGET"
fi

# note that all .rc files were already copied
# we just need to replace some of them by empty files
# etc/init
SUB1=init
TARGET1=$TARGET/$SUB1
$ECHO -e "\tcreating $SUB/$SUB1 and empty .rc files"
for i in atrace.rc bluetooth-events.rc bootstat.rc caffed.rc com.qualcomm.qti.sigma_miracast\@1.0-service.rc dumpstate.rc engineermode.rc flags_health_check.rc heapprofd.rc incidentd.rc iorapd.rc mdnsd.rc perfetto.rc perfservice.rc recovery-persist.rc recovery-refresh.rc rss_hwm_reset.rc sarahd.rc statsd.rc tombstoned.rc traceur.rc uncrypt.rc update_engine.rc update_verifier.rc wfdservice.rc; do
    $RM -f $TARGET1/$i
    $TOUCH $TARGET1/$i
done
NUMFILES=$($FIND $TARGET1 -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES files in $TARGET1"

# etc/permissions
SUB3=permissions
TARGET3=$TARGET/$SUB3
$ECHO -e "\tgenerating $SUB/$SUB3"
$MKDIR -p $TARGET3
# we should not delete any .xml files in $TARGET3 (as this has been done from system/etc)
# note that we do not need to copy files from permissions (as these are .xml and have been copied above)
# just add the extra .xml files in permissions
for i in com.google.android.media.effects privapp-permissions-com.android.hotwordenrollment.tgoogle privapp-permissions-google-dpc privapp-permissions-airaudio org.pixelexperience.ambient.play org.pixelexperience.weather.client com.android.systemui com.android.settings android.hardware.vr.high_performance android.hardware.vr.headtracking com.google.android.dialer.support nexus nova pixel_2017 pixel_2017_exclusive privapp-permissions-airaudio gearhead privapp-permissions-philip; do
    $CP ~/7t/permissions/$i.xml $TARGET3
done
# make a few XMLs empty
for i in android.test.runner.xml android.test.mock.xml android.test.base.xml; do
    $RM -f $TARGET3/$i
    $ECHO '<?xml version="1.0" encoding="utf-8"?><permissions/>' > $TARGET3/$i
done
NUMFILES=$($FIND $TARGET3 -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES files in $TARGET3"

# etc/sysconfig contains "extra" files which we simply copy from ~/7t/etc/
# etc/sysconfig
SUB2=sysconfig
TARGET2=$TARGET/$SUB2
$ECHO -e "\tgenerating $SUB/$SUB2"
$MKDIR -p $TARGET2
# we should not delete any .xml files in $TARGET2 (as this has been done from system/etc)
$CP ~/7t/sysconfig/* $TARGET2
NUMFILES=$($FIND $TARGET2 -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES files in $TARGET2"

# optimize txt file in system/etc
$ECHO -e "\toptimizing $TARGET/qvr/qvrservice_config.txt"
$MKDIR -p $TARGET/qvr
$CAT $SROOT/etc/qvr/qvrservice_config.txt  | $GREP -v ^# | $SED '/^$/d' > $TARGET/qvr/qvrservice_config.txt

# add bash
$ECHO -e "\tadding bash shell"
$MKDIR -p $TARGET/bash
$CP ~/7t/bash/bashrc $TARGET/bash
$CP ~/7t/bash/bash_aliases $TARGET/bash
$CP ~/7t/bash/mkshrc $TARGET
$CHMOD 755 $TARGET/mkshrc

# optimize in system/etc
cd $TARGET
optimize_xml $TARGET
optimize_json $TARGET
optimize_conf $TARGET
optimize_proto $TARGET
optimize_rc $TARGET
cd $MODULE

#======================================================================
# /system/fonts

SUB=system/fonts
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET
# empty the Slate and MY* font files
# removing NotoSans* files results in a slow boot
for i in SlateForOnePlus-Black.ttf SlateForOnePlus-Bold.ttf SlateForOnePlus-Book.ttf SlateForOnePlus-Light.ttf SlateForOnePlus-Medium. SlateForOnePlus-Regular.ttf SlateForOnePlus-Thin.ttf MYingHeiHKForOnePlus-W4.ttf MYingHeiPRC-W2.ttf MYingHeiPRC-W3.ttf MYingHeiPRC-W4.ttf MYingHeiPRC-W5.ttf MYingHeiPRC-W7.ttf MYingHeiPRC-W8.ttf; do
    $TOUCH $TARGET/$i
done
NUMFILES=$($FIND $TARGET -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES files in $TARGET"
$RM -f $MODULE/system/etc/fonts_slate.xml
$TOUCH $MODULE/system/etc/fonts_slate.xml
$ECHO '<?xml version="1.0" encoding="utf-8"?>' >> $MODULE/system/etc/fonts_slate.xml
$ECHO '<familyset version="23">' >> $MODULE/system/etc/fonts_slate.xml
$ECHO '</familyset>' >> $MODULE/system/etc/fonts_slate.xml
$ECHO -e "\tcreated $MODULE/system/etc/fonts_slate.xml"

#======================================================================
# /system/bpm

# this is the only directory (system/product/vendor) which contains xml files outside of etc subdirectory
SUB=system/bpm
TARGET=$MODULE/$SUB
$ECHO -e "-- generating $SUB"
$MKDIR -p $TARGET
$CP ~/7t/bpm/*.xml $TARGET/
NUMFILES=$($FIND $TARGET -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES files in $TARGET"

#======================================================================
# /vendor

SUB=system/vendor
TARGET=$MODULE/$SUB
$MKDIR -p $TARGET
$ECHO -e "-- generating $SUB"

#=====================
# /vendor/build.prop
PFILE=build.prop
# copy original build.prop and remove comments and empty lines
$ECHO -e "\tgenerating $TARGET/$PFILE from $VROOT/$PFILE"
$SUDO $CAT $VROOT/$PFILE | $GREP -v ^# | $SED '/^$/d' | sort > $TARGET/$PFILE
# changing properties
declare -a props=(
    's/ro.com.android.dataroaming=false/ro.com.android.dataroaming=true/g'
    's/ro.hwui.use_vulkan=/ro.hwui.use_vulkan=true/g'
)
for i in ${props[@]}; do
    $CAT $TARGET/$PFILE | $SED $i > /tmp/$PFILE
    $CP /tmp/$PFILE $TARGET/$PFILE
done
declare -a props=(
    none
)
# removing properties
for i in ${props[@]}; do
    $CAT $TARGET/$PFILE | $GREP -v $i > /tmp/$PFILE
    $CP /tmp/$PFILE $TARGET/$PFILE
done

#=====================
# /vendor/default.prop
PFILE=default.prop
# copy original $PFILE and remove comments and empty lines
$ECHO -e "\tgenerating $TARGET/$PFILE from $VROOT/$PFILE"
$SUDO $CAT $VROOT/$PFILE | $GREP -v ^# | $SED '/^$/d' | sort > $TARGET/$PFILE
# changing properties
declare -a props=(
    's/ro.adb.secure=1/ro.adb.secure=0/g'
)
for i in ${props[@]}; do
    $CAT $TARGET/$PFILE | $SED $i > /tmp/$PFILE
    $CP /tmp/$PFILE $TARGET/$PFILE
done
declare -a props=(
    log.tag.stats_log=I
)
# removing properties
for i in ${props[@]}; do
    $CAT $TARGET/$PFILE | $GREP -v $i > /tmp/$PFILE
    $CP /tmp/$PFILE $TARGET/$PFILE
done

#=====================
# /vendor/ueventd.rc
# this is the only file outside 'etc' subdirectory which is an rc file

$ECHO -e "\tgenerating $TARGET/ueventd.rc from $VROOT/ueventd.rc"
$SUDO $CAT $VROOT/ueventd.rc | $GREP -v ^# | $SED '/^$/d' | sort > $TARGET/ueventd.rc

#=====================
# /vendor/radio (.sql files)

SUB0=radio
TARGET0=$TARGET/radio
$ECHO -e "\tgenerating $SUB/$SUB0"
$MKDIR -p $TARGET0
# copy .sql files and optimize them
copyfiles "$VROOT/radio" "$TARGET0" '*.sql'
optimize_sql "$TARGET0"

#=====================
# /vendor/etc

SUB1=etc
TARGET1=$TARGET/$SUB1
$ECHO -e "\tgenerating $SUB/$SUB1"
$MKDIR -p $TARGET1

# copy .xml, .conf, .json, .rc files (those we optimize)
copyfiles "$VROOT/etc" "$TARGET1" '*.xml'
copyfiles "$VROOT/etc" "$TARGET1" '*.conf'
copyfiles "$VROOT/etc" "$TARGET1" '*.json'
copyfiles "$VROOT/etc" "$TARGET1" '*.rc'
copyfiles "$VROOT/etc" "$TARGET1" '*.ini'

# 3 special json files which were hand edited
# the first 2 contain C style comments, the last file has a syntax error in the original SW
$ECHO -e "\tcopying 3 json files from ~7t/json"
$CP ~/7t/json/ta_config.json $TARGET1/ssg/
$CP ~/7t/json/tz_whitelist.json $TARGET1/ssg/
$CP ~/7t/json/sns_mag_cal_legacy.json $TARGET1/sensors/config/

# there are a few weird XML files that fail validation, fix them
$ECHO -e "\tfixing $TARGET1/data/dsi_config.xml and $TARGET1/data/netmgr_config.xml"
$CAT $TARGET1/data/dsi_config.xml | tail -n +8 > /tmp/foo.xml
$CP /tmp/foo.xml $TARGET1/data/dsi_config.xml
$CAT $TARGET1/data/netmgr_config.xml | tail -n +8 > /tmp/foo.xml
$CP /tmp/foo.xml $TARGET1/data/netmgr_config.xml

# wifi bonding
# note:
# BandCapability=0 (both 2.4ghz and 5ghz)
# BandCapability=1 (only 2.4ghz)
# BandCapability=2 (only 5ghz)
$ECHO -e "\tchanges for WIFI channel bonding"
if [ -f $TARGET1/wifi/WCNSS_qcom_cfg.ini ]; then
    $SED -i '/BandCapability=/d;/gChannelBondingMode24GHz=/d;/gChannelBondingMode5GHz=/d;/gForce1x1Exception=/d;s/^END$/gChannelBondingMode24GHz=1\ngChannelBondingMode5GHz=1\ngForce1x1Exception=0\nBandCapability=0\nEND/g' $TARGET1/wifi/WCNSS_qcom_cfg.ini
fi

# and we want to empty the .rc file which starts dolby as it crashes !
$ECHO -e "\temptying $TARGET1/init/vendor.dolby.hardware.dms@1.0-service.rc file (causes crash)"
$RM -f $TARGET1/init/vendor.dolby.hardware.dms\@1.0-service.rc
$TOUCH $TARGET1/init/vendor.dolby.hardware.dms\@1.0-service.rc

$ECHO -e "\tcopying mixer paths mixer_paths_tavil.xml and mixer_paths_pahu.xml"
# copy sound paths (increa$SED volume)
$CP ~/7t/etc/mixer_paths_tavil.xml $TARGET1
$CP ~/7t/etc/mixer_paths_pahu.xml $TARGET1

cd $MODULE
 
# clear the majority of the nfc related files in the vendor/etc directory
for i in libnfc-nci_beijingbus.conf libnfc-nci_changancard.conf libnfc-nci_shenzhentong.conf libnfc-nci_suzhoutong.conf libnfc-nci_wuhantong.conf libnfc-nci_yangchengtong.conf libnfc-nci_zhengzhoubus.conf libnfc-nxp_RF_beijingbus.conf libnfc-nxp_RF_changancard.conf libnfc-nxp_RF_shenzhentong.conf libnfc-nxp_RF_suzhoutong.conf libnfc-nxp_RF_wuhantong.conf libnfc-nxp_RF_yangchengtong.conf libnfc-nxp_RF_zhengzhoubus.conf libnfc-nxp_beijingbus.conf libnfc-nxp_changancard.conf libnfc-nxp_shenzhentong.conf libnfc-nxp_suzhoutong.conf libnfc-nxp_wuhantong.conf libnfc-nxp_yangchengtong.conf libnfc-nxp_zhengzhoubus.conf libnfc-nci_beijingbus.conf libnfc-nci_changancard.conf libnfc-nci_productline.conf libnfc-nci_shenzhentong.conf libnfc-nci_suzhoutong.conf libnfc-nci_wuhantong.conf libnfc-nci_yangchengtong.conf libnfc-nci_zhengzhoubus.conf libnfc-nxp_RF_beijingbus.conf libnfc-nxp_RF_changancard.conf libnfc-nxp_RF_shenzhentong.conf libnfc-nxp_RF_suzhoutong.conf libnfc-nxp_RF_wuhantong.conf libnfc-nxp_RF_yangchengtong.conf libnfc-nxp_RF_zhengzhoubus.conf libnfc-nxp_beijingbus.conf libnfc-nxp_changancard.conf libnfc-nxp_shenzhentong.conf libnfc-nxp_suzhoutong.conf libnfc-nxp_wuhantong.conf libnfc-nxp_yangchengtong.conf libnfc-nxp_zhengzhoubus.conf; do
    $RM $TARGET1/$i
    $TOUCH $TARGET1/$i
done

# files which we want to have empty or modify a bit
$TOUCH $TARGET1/NOTICE.xml.gz
$CAT $VROOT/etc/fstab.qcom | $GREP -v ^# | $SED '/^$/d' > $TARGET1/fstab.qcom
$CAT $VROOT/etc/fstab_nodata.qcom | $GREP -v ^# | $SED '/^$/d' > $TARGET1/fstab_nodata.qcom
$CAT $VROOT/etc/ArmHDCP_QTI_Android.cfg | $GREP -v ^# | $SED '/^$/d' | $SED 's/EnableLogs=True/EnableLogs=False/g' | $SED 's/DebugLevel=10/DebugLevel=0/g' | $SED 's/LogcatLogs=True/LogcatLogs=False/g' > $TARGET1/ArmHDCP_QTI_Android.cfg
$CAT $VROOT/etc/DxHDCP.cfg | $GREP -v ^# | $SED '/^$/d' | $SED 's/EnableLogs=True/EnableLogs=False/g' | $SED 's/DebugLevel=60/DebugLevel=0/g' | $SED 's/LogcatLogs=True/LogcatLogs=False/g' > $TARGET1/DxHDCP.cfg

#=====================
# bin

SUB2=bin
TARGET2=$TARGET/$SUB2
$ECHO -e "\tgenerating $SUB/$SUB2"
$MKDIR -p $TARGET2

for i in audioflacapp ATFWD-daemon OPNetlinkService host_manager_11ad wfdvndservice wifi_diag wifidisplayhalservice wifilearner wigig_wiburn wigighalsvc wigignpt diag_callback_sample diag_dci_sample qseecom_sample_client secure_ui_sample_client athdiag cnss_diag diag_klog diag_mdlog diag_uart_log ipacm-diag ssr_diag test_diag fmfactorytest fmfactorytestserver ftmtest mm-vidc-omx-test oemnvbkdaemon oem-system-daemon qmi_simple_ril_test dump_sniffer.sh launch_sniffer.sh terminate_sniffer.sh shell_11ad hostapd_cli cnd init.qcom.crashdata.sh; do
    $RM -rf $TARGET2/$i
    $TOUCH $TARGET2/$i
done
NUMFILES=$($FIND $TARGET2 -type f | $WC -l)
$ECHO -e "\tcreated $NUMFILES (empty) files in $SUB/$SUB2"

# empty binaries in vendor/bin/hw
$MKDIR -p $TARGET2/hw
for i in android.hardware.atrace\@1.0-service android.hardware.neuralnetworks\@1.2-service-qti vendor.dolby.hardware.dms\@1.0-service vendor.oneplus.engnative.engineer\@1.0-service vendor.oneplus.faceunlock.hal\@1.0-service vendor.qti.hardware.soter\@1.0-service; do
    $RM -f $TARGET2/hw/$i
    $TOUCH $TARGET2/hw/$i
done
NUMFILES=$($FIND $TARGET2/hw -type f | $WC -l)
$ECHO -e "\temptied $NUMFILES (empty) files in $TARGET2/hw"

#=====================
# optimize

cd $TARGET
optimize_xml $TARGET
optimize_json $TARGET
optimize_conf $TARGET
optimize_rc $TARGET
optimize_ini $TARGET
cd $MODULE

#======================================================================
# /product: 2 overlays, optimize XMLs, optimize .conf files

SUB=system/product
TARGET=$MODULE/$SUB
$MKDIR -p $TARGET
$ECHO -e "-- generating $SUB"

#=====================
# /product/build.prop
# note that this does NOT work
# I think the build.prop file is proces$SED and then
# the mount /sbin/.magisk/block/data on /product/build.prop is happening
# so on the system we see the modified build.prop but it has not been processed
# all properties which need changing need to go in $MODULE/system.prop

PFILE=build.prop
# copy original build.prop and remove comments and empty lines
$ECHO -e "\tgenerating $TARGET/$PFILE from $PROOT/$PFILE"
$SUDO $CAT $PROOT/$PFILE | $GREP -v ^# | $SED '/^$/d' | sort > $TARGET/$PFILE
# changing properties
declare -a props=(
    's/ro.opa.eligible_device=true/ro.opa.eligible_device=true/g'
)
for i in ${props[@]}; do
    $CAT $TARGET/$PFILE | $SED $i > /tmp/$PFILE
    $CP /tmp/$PFILE $TARGET/$PFILE
done
# removing properties
declare -a props=(
    none
)
for i in ${props[@]}; do
    $CAT $TARGET/$PFILE | $GREP -v $i > /tmp/$PFILE
    $CP /tmp/$PFILE $TARGET/$PFILE
done

#=====================
# /product/etc

SUB1=etc
TARGET1=$TARGET/$SUB1
$ECHO -e "\tgenerating $SUB/$SUB1"
$MKDIR -p $TARGET1

copyfiles "$PROOT/etc" "$TARGET1" '*.xml'
copyfiles "$PROOT/etc" "$TARGET1" '*.conf'
copyfiles "$PROOT/etc" "$TARGET1" '*.rc'

# create a file of bind mounts for product/etc which we use in the service.sh script
# the file is placed at the top of the module
$RM -f $MODULE/bind-mounts-product-etc
$TOUCH $MODULE/bind-mounts-product-etc
$ECHO -e "# do not remove, this file is generated by $0" >> $MODULE/bind-mounts-product-etc
$ECHO -e "# bind mounts for .xml, .conf, .rc files inside /product/etc directory" >> $MODULE/bind-mounts-product-etc
$ECHO -e "\tgenerating file $MODULE/bind-mounts-product-etc"
CUR=$(pwd)
cd $PROOT/etc
# remove the pending './'
$FIND . -type f -name '*.xml' | $SED 's%\.\/%%g' >> $MODULE/bind-mounts-product-etc
$FIND . -type f -name '*.conf' | $SED 's%\.\/%%g' >> $MODULE/bind-mounts-product-etc
$FIND . -type f -name '*.rc' | $SED 's%\.\/%%g' >> $MODULE/bind-mounts-product-etc

if [ "$WIZ" == 0 ]; then
    # modified APN file (note that original file was already copied from source using copyfiles above)
    # actually this does NOT work, "adding" a file in product/etc messes up magisk (!)
    # next line does not work therefore
    # $CP $TARGET1/$APNS $TARGET1/$APNS.orig
    $CP ~/7t/etc/$APNS2 $TARGET1/$APNS
    $ECHO -e "\tcopied simplified $APNS2 to $TARGET1/$APNS"
fi

# there are 2 XML files which have version="2.0", change this to version="1.0" other wise xml-optimize emtpies the files
$CAT $PROOT/etc/permissions/vendor.qti.hardware.data.connection-V1.0-java.xml | $SED 's/version="2.0"/version="1.0"/g' > $TARGET1/permissions/vendor.qti.hardware.data.connection-V1.0-java.xml
$CAT $PROOT/etc/permissions/vendor.qti.hardware.data.connection-V1.1-java.xml | $SED 's/version="2.0"/version="1.0"/g' > $TARGET1/permissions/vendor.qti.hardware.data.connection-V1.1-java.xml

#=====================
# /product/overlay

SUB2=overlay
TARGET2=$TARGET/$SUB2
$ECHO -e "\tgenerating $SUB/$SUB2"
$MKDIR -p $TARGET2
$ECHO -e "\tcopying 4 overlays into $SUB/$SUB2"
$CP ~/7t/overlay/MyOverlayQSTiles5Col4Rows.apk $TARGET2
$CP ~/7t/overlay/MyOverlayWhiteFingerPrint.apk $TARGET2
$CP ~/7t/overlay/MyOverlayStatusbarIcons.apk $TARGET2
$CP ~/7t/overlay/MyOverlayTilesIcons.apk $TARGET2
$CHMOD 644 $TARGET2/*

#=====================
# optimize

cd $TARGET
optimize_xml $TARGET
optimize_conf $TARGET
optimize_rc $TARGET
cd $MODULE

#======================================================================
# make sure there is no crap left behind
$FIND . -type f -name '*~' -exec $RM -f {} \;
$FIND . -type f -name '#*' -exec $RM -f {} \;

#======================================================================
# final validation on all XML files

NUMFILES=$($FIND . -type f -name '*.xml' | $WC -l)
$ECHO -e "-- validating $NUMFILES XML files"
$FIND $MODULE -type f -name '*.xml' -exec $XMLSTARLET val {} \; | $GREP -v '\- valid'

#======================================================================
# generate a file with bind-mounts to the APK directories in extra

# create a file of bind mounts for product/etc which we use in the service.sh script
# the file is placed at the top of the module
# it contains <pkg-name>:<subdir-in-extra>
$RM -f $MODULE/bind-mounts-extra
$TOUCH $MODULE/bind-mounts-extra
$ECHO -e "# do not remove, this file is generated by $0" >> $MODULE/bind-mounts-extra
$ECHO -e "# the APKs in the directories will be 1-off installed as 'updates' via LS99installpackages" >> $MODULE/bind-mounts-extra
$ECHO -e "-- generating file $MODULE/bind-mounts-extra"

for i in $($FIND $MODULE/extra -maxdepth 3 -mindepth 3 | $SED "s%$MODULE/extra/%%g"); do
    PKGNAME=$(apkdump $MODULE/extra/$i/*.apk | $AWK '{print $3}' | $SED s%\'%%g | $SED 's/name=//g')
    $ECHO -e "$PKGNAME:$i" >> $MODULE/bind-mounts-extra
done

#======================================================================

$RM -f $MODULE/googlewiz
if [ "$WIZ" == 1 ]; then
    $ECHO -e "-- we're generating the googlewiz version, removing files"
    $TOUCH $MODULE/googlewiz
    $RM -rf system/vendor/app/MySystemInfo/
    $RM -rf system/vendor/app/MyLauncherKey/
    $RM -rf system/vendor/app/MyCalendarWidget/
    $RM -f system/etc/services.d/LS99osmand
    $RM -f system/etc/services.d/LS99mountmusic
    $CP $PROOT/etc/apns-conf.xml $MODULE/system/product/etc/
    $CP $SROOT/etc/apns-conf.xml $MODULE/system/etc/
fi

#======================================================================
# print some stats

TOTALFILES=$($FIND . -type f | $WC -l)
TOTALEMPTY=$($FIND . -type f -empty | $WC -l)
$ECHO -e "-- total files in $MODULE = $TOTALFILES ($TOTALEMPTY empty)"
TOTALFILES=$($FIND . -type f -name '*.apk' | $WC -l)
TOTALEMPTY=$($FIND . -type f -name '*.apk' -empty | $WC -l)
$ECHO -e "-- total APK files in $MODULE = $TOTALFILES ($TOTALEMPTY empty)"
TOTALFILES=$($FIND . -type f -name '*.xml' | $WC -l)
TOTALEMPTY=$($FIND . -type f -name '*.xml' -empty | $WC -l)
$ECHO -e "-- total XML files in $MODULE = $TOTALFILES ($TOTALEMPTY empty)"
TOTALFILES=$($FIND . -type f -name '*.json' | $WC -l)
TOTALEMPTY=$($FIND . -type f -name '*.json' -empty | $WC -l)
$ECHO -e "-- total JSON files in $MODULE = $TOTALFILES ($TOTALEMPTY empty)"
TOTALFILES=$($FIND . -type f -name '*.sh' | $WC -l)
TOTALEMPTY=$($FIND . -type f -name '*.sh' -empty | $WC -l)
$ECHO -e "-- total SH files in $MODULE = $TOTALFILES ($TOTALEMPTY empty)"
TOTALFILES=$($FIND . -type f -name '*.conf' | $WC -l)
TOTALEMPTY=$($FIND . -type f -name '*.conf' -empty | $WC -l)
$ECHO -e "-- total CONF files in $MODULE = $TOTALFILES ($TOTALEMPTY empty)"
TOTALFILES=$($FIND . -type f -name '*.ini' | $WC -l)
TOTALEMPTY=$($FIND . -type f -name '*.ini' -empty | $WC -l)
$ECHO -e "-- total INI files in $MODULE = $TOTALFILES ($TOTALEMPTY empty)"

#======================================================================
# finally build the magizk $ZIP file (module) and puh to phone

if [ "$NOMODULE" -eq 1 ]; then
    $ECHO -e "-- not building module ('nomodule' option was given on command line)"
    $ECHO "-- done"
    exit 0
fi

cd ~
# make sure to do an explicit cd into the module directory
cd ~/7t/magisk/modules/googlewiz
$ECHO -e "-- building module from directory $MODULE into $MODULEZIP (version: $NEWVER)"
$ZIP -r $MODULEZIP . > /dev/null
sync
$ECHO -e "-- pushing $MODULEZIP to device"
$ADB push $MODULEZIP /sdcard/ > /dev/null

$ECHO "-- done"
exit 0
