#!/bin/bash

echo "$@"

cd ~

if [ $# -eq 0 ]; then
    echo "usage: $0 <version> [apps] [nomodule]"
    exit -1
fi
VERSION="$1"

EXPAPPS=0
NOMODULE=0
WIZ=0
for arg in "$@"; do
    if [ "$arg" == "apps" ]; then EXPAPPS=1; fi
    if [ "$arg" == "nomodule" ]; then NOMODULE=1; fi
    if [ "$arg" == "wiz" ]; then WIZ=1; fi
done

echo "-- EXPAPPS = $EXPAPPS"
echo "-- NOMODULE = $NOMODULE"

~/bin/mt "$VERSION" 2>/dev/null

SWVER=$1
CURR=$(pwd)
NAME=googlewiz
BASE=~/7t/magisk/modules
MODULE=$BASE/$NAME
SRC=~/pro
SWSRC=$SRC/software-$SWVER
MODULEZIP=~/Desktop/mm-$NAME.zip
APNS=apns-conf.xml
APNS2=apns-conf2.xml

rm -f $MODULE/.expandapps
if [ $EXPAPPS -eq 1 ]; then
    echo "-- apps will be expanded during module installation"
else
    echo "-- apps will not be expanded during module creation (here)"
    touch $MODULE/.expandapps
fi 

#======================================================================

echo -e "-- checking prerequisites"

echo -e "\tchecking if module directories exist"
for i in $MODULE $MODULE/system; do
    if [ ! -d $i ]; then
        echo "!! directory $i does not exist, exiting"
        exit 1
    fi
done

echo -e "\tchecking if module files exist"
for i in $MODULE/install.sh $MODULE/module.prop $MODULE/post-fs-data.sh $MODULE/service.sh $MODULE/system.prop $MODULE/scriptwrapper; do
    if [ ! -f $i ]; then
        echo "!! file $i does not exist, exiting"
        exit 1
    fi
done

OLDVER=$(cat $MODULE/module.prop | grep 'version=' | sed 's/version=//g')
NEWVER=$(date +'%Y-%m-%d %H:%M')

echo -e "-- oldversion: $OLDVER"

sed -i -e "s/version=$OLDVER/version=$NEWVER/g" $MODULE/module.prop

echo -e "\tchecking if ~/pro/modappsq.tar exists"
if [ ! -f ~/pro/modappsq.tar ]; then
    echo "!! ~/pro/modappsq.tar does not exist, exiting"
    exit 1
fi

echo -e "\tchecking mount points for $SWSRC/product/output/mnt"
MTSYSTEM=$SWSRC/output/mnt/system
MTVENDOR=$SWSRC/output/mnt/vendor
MTPRODUC=$SWSRC/output/mnt/product
if [ ! -d $MTSYSTEM ]; then
    echo "!! directory $MTSYSTEM does not exist, did you create it?"
    exit 1
fi
if [ ! -d $SRCVENDOR ]; then
    echo "!! directory $MTVENDOR does not exist, did you create it?"
    exit 1
fi
if [ ! -d $SRCPRODUC ]; then
    echo "!! directory $MTPRODUC does not exist, did you create it?"
    exit 1
fi
if [ "$(\ls -A $MTSYSTEM | wc -l)" -eq 0 ]; then
    echo "!! directory $MTSYSTEM is empty, did you mount it?"
    exit 1
fi
if [ "$(\ls -A $MTVENDOR | wc -l)" -eq 0 ]; then
    echo "!! directory $MTVENDOR is empty, did you mount it?"
    exit 1
fi
if [ "$(\ls -A $MTPRODUC | wc -l)" -eq 0 ]; then
    echo "!! directory $MTPRODUC is empty, did you mount it?"
    exit 1
fi

#======================================================================
# cleanup

# system directory is 1 level deeper
SROOT=$MTSYSTEM/system
VROOT=$MTVENDOR
PROOT=$MTPRODUC

echo -e "-- removing $MODULEZIP and cleaning up junk files in $MODULE"
rm -f ~/Desktop/mm-*.zip
cd $MODULE
find $MODULE -name '*~' -exec rm -f {} \;
find $MODULE -name '#*' -exec rm -f {} \;

#======================================================================
# helper functions to optimize files

optimize_xml () {
    cd $1
    # optimizing all .xml files
    ~/bin/xml-optimize
    NUMFILES=$(find $1 -type f -name '*.xml' | wc -l)
    echo -e "   optimized $NUMFILES .xml files in $TARGET"
}

optimize_json () {
    # optimize all .json files
    for i in $(find $1 -type f -name '*.json'); do
        (jq -c -M . $i > /tmp/opti.json) 2>/dev/null
        cp /tmp/opti.json $i
    done
    NUMFILES=$(find $1 -type f -name '*.json' | wc -l)
    echo -e "   optimized $NUMFILES .json files in $1"
}

optimize_proto () {
    # optimize all .proto files
    for i in $(find $1 -type f -name '*.proto'); do
        cat $i | sed 's/\/\/.*//g' | sed '/^[[:space:]]*$/d' > /tmp/opti.proto
        cp /tmp/opti.proto $i
    done
    NUMFILES=$(find $1 -type f -name '*.proto' | wc -l)
    echo -e "   optimized $NUMFILES .proto files in $1"
}

optimize_conf () {
    # optimize all .conf files
    for i in $(find $1 -type f -name '*.conf'); do
        cat $i | grep -v ^# | sed 's/#.*//g' | sed '/^[[:space:]]*$/d' | sed 's/ = /=/g' > /tmp/opti.conf
        cp /tmp/opti.conf $i
    done
    NUMFILES=$(find $1 -type f -name '*.conf' | wc -l)
    echo -e "   optimized $NUMFILES .conf files in $1"
}

optimize_rc () {
    # optimize all .rc files
    for i in $(find $1 -type f -name '*.rc'); do
        cat $i | grep -v ^# | sed 's/#.*//g' | sed '/^[[:space:]]*$/d' > /tmp/opti.rc
        cp /tmp/opti.rc $i
    done
    NUMFILES=$(find $1 -type f -name '*.rc' | wc -l)
    echo -e "   optimized $NUMFILES .rc files in $1"
}

optimize_sh () {
    # optimize all .sh files
    for i in $(find $1 -type f -name '*.sh'); do
        cat $i | grep -v ^# | sed 's/#.*//g' | sed '/^[[:space:]]*$/d' > /tmp/opti.rc
        cp /tmp/opti.rc $i
    done
    NUMFILES=$(find $1 -type f -name '*.sh' | wc -l)
    echo -e "   optimized $NUMFILES .sh files in $1"
}

optimize_idc () {
    # optimize all .idc files
    for i in $(find $1 -type f -name '*.idc'); do
        cat $i | grep -v ^# | sed 's/#.*//g' | sed '/^[[:space:]]*$/d' | sed 's/ = /=/g' > /tmp/opti.idc
        cp /tmp/opti.idc $i
    done
    NUMFILES=$(find $1 -type f -name '*.idc' | wc -l)
    echo -e "   optimized $NUMFILES .idc files in $1"
}

optimize_ini () {
    # optimize all .ini files
    for i in $(find $1 -type f -name '*.ini'); do
        cat $i | grep -v ^# | sed 's/#.*//g' | sed '/^[[:space:]]*$/d' | sed 's/ = /=/g' > /tmp/opti.idc
        cp /tmp/opti.idc $i
    done
    NUMFILES=$(find $1 -type f -name '*.ini' | wc -l)
    echo -e "   optimized $NUMFILES .ini files in $1"
}

optimize_kcm () {
    # optimize all .kcm files
    for i in $(find $1 -type f -name '*.kcm'); do
        cat $i | grep -v ^# | sed '/^$/d' > /tmp/opti.kcm
        cp /tmp/opti.kcm $i
    done
    NUMFILES=$(find $1 -type f -name '*.kcm' | wc -l)
    echo -e "   optimized $NUMFILES .kcm files in $1"
}

optimize_kl () {
    # optimize all .kl files
    for i in $(find $1 -type f -name '*.kl'); do
        cat $i | grep -v ^# | sed 's/#.*//g' | sed '/^[[:space:]]*$/d' | sed 's/ = /=/g' > /tmp/opti.kl
        cp /tmp/opti.kl $i
    done
    NUMFILES=$(find $1 -type f -name '*.kl' | wc -l)
    echo -e "   optimized $NUMFILES .kl files in $1"
}

optimize_sql () {
    # optimize all .sql files
    for i in $(find $1 -type f -name '*.sql'); do
        cat $i | cpp | grep -v ^# | grep -v ^-- | sed '/^$/d' > /tmp/opti.sql
        cp /tmp/opti.sql $i
    done
    NUMFILES=$(find $1 -type f -name '*.sql' | wc -l)
    echo -e "   optimized $NUMFILES .sql files in $1"
}

#======================================================================
# helper function to copy files

copyfiles () {
    CUR=$(pwd)
    echo -e "   copying $3 files from $1 to $2"
    cd "$1"
    tar cf - $(find . -type f -name "$3") | (cd "$2"; tar xf -)
    cd $CUR
}

#======================================================================
# start building module

echo -e "-- building module: $MODULE"

echo -e "-- creating basic structure in $MODULE/system"
# erase the whole system and recreate the basic structure
rm -rf $MODULE/system/*

# /system/build.prop
# note that this does not work at run time
# although there is a modified /system/build.prop file it seems not to be taken into account
# we actually use the magisk system.prop file
# so this is "for reference only"
PFILE=build.prop
TARGET=$MODULE/system
# copy original $PFILE and remove comments and empty lines
echo "   generating $TARGET/$PFILE from $SROOT/$PFILE"
sudo cat $SROOT/$PFILE | grep -v ^# | sed '/^$/d' | sort > $TARGET/$PFILE
~/7t/buildprop/gen $TARGET/$PFILE
cp ~/7t/buildprop/$PFILE $TARGET/$PFILE
# create the modules system.prop file in the magisk module
cp ~/7t/buildprop/extrabuildQ $MODULE/system.prop

#======================================================================
# start building module

mkdir -p $MODULE/system/product
mkdir -p $MODULE/system/vendor


#======================================================================
# executables for /system/xbin

SUB=system/xbin
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB"
mkdir -p $TARGET
for i in androidauto apackages appc bash busybox cmp compall copyflash diff doperm dovl dss e2fsck e2fsck.static fdisk find freeze freeze fstrim ftsc gdisk gset hl hm hs idiff ipk ksettings lcpu lz4 mkappsq oena parted pps rb rmovl rsync sqlite3 strace sysro sysrw tune2fs unzip vacuum wellbeing xmlstarlet zip zipalign; do
    cp ~/7t/bin/$i $TARGET
    chmod 755 $TARGET/$i
done
NUMFILES=$(find $TARGET -type f | wc -l)
echo -e "   created $NUMFILES files in system/xbin"

# and we also remove a few by making them empty files
for i in antradio_app pnx; do
    rm -rf $TAGET/$i
    touch $TARGET/$i
    chmod 755 $TARGET/$i
done

#======================================================================
# empty executables to override files in /system/bin

SUB=system/bin
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB (creating empty files)"
mkdir -p $TARGET
for i in ATFWD-daemon OPDiagdataCopy OPDiagnoseservice OPNetlinkService asserttip atrace auditctl auto_brightness_log.sh bootstat br_app_data_service bugreport bugreportz caffe clatd debuggerd diag_socket_log engineer_shell.sh filebuilderd fsck_msdos heapprofd incident incident_helper incidentd iorapd migrate_legacy_obb_data.sh mmi_diag move_time_data.sh move_widevine_data.sh move_wifi_data.sh notify_traceur.sh newfs_msdos ntfs-3g ntfsfix oemlogkit opposensortest perfetto perfservice qvrservicetest qvrservicetest64 recovery-persist recovery-refresh rtspclient rtspserver schedtest sgdisk sigma_miracasthalservice simpleperf simpleperf_app_runner sload_f2fs statsd tombstoned traced traced_probes uiautomator update_engine update_engine_client vendor_cmd_tool viewcompiler vl53l1_iotest vr wfdservice wfdvndservice; do
    touch $TARGET/$i
done
NUMFILES=$(find $TARGET -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET"

#======================================================================
# /system/framework

SUB=system/framework
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB"
mkdir -p $TARGET
cp ~/7t/framework/com.google.android.dialer.support.jar $TARGET
cp ~/7t/framework/com.google.android.media.effects.jar $TARGET
cp ~/7t/framework/com.google.vr.platform.jar $TARGET
cp ~/7t/framework/com.google.widevine.software.drm.jar $TARGET
chmod 644 $TARGET/*
NUMFILES=$(find $TARGET -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET"

#======================================================================
# /system/lib64

SUB=system/lib64
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB"
mkdir -p $TARGET
cp ~/7t/libs/Q/libsketchology_native.so $TARGET
chmod 644 $TARGET/*
NUMFILES=$(find $TARGET -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET"

#======================================================================
# /system/media (sound files)

SUB=system/media
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB"
mkdir -p $TARGET
cd $MODULE/system
tar xf ~/7t/sounds/modulemedia.tar
cd $MODULE
NUMFILES=$(find $TARGET -type f -name '*.ogg' | wc -l)
echo -e "   created $NUMFILES files in $TARGET"


#======================================================================
# /system/usr

SUB=system/usr
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB"
mkdir -p $TARGET


SUB1=hyphen-data
TARGET1=$TARGET/$SUB1
mkdir -p $TARGET1
echo -e "   populating $SUB/$SUB1 with empty files"
for i in $(\ls $MTSYSTEM/$SUB/$SUB1/ | grep -v -en-gb); do
    touch $TARGET1/$i
done
NUMFILES=$(find $TARGET1 -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET1"

# first copy all keylayout files (only in next step some of them will be 'emptied')
copyfiles "$SROOT/usr" "$TARGET" '*.kl'

SUB2=keylayout
TARGET2=$TARGET/$SUB2
mkdir -p $TARGET2
echo -e "   populating $SUB/$SUB2 with empty files"
for i in $(\ls $MTSYSTEM/$SUB/$SUB2/ | grep Vendor_); do
    # remove copied file and replace by empty file
    rm -f $TARGET2/$i
    touch $TARGET2/$i
done
NUMFILES=$(find $TARGET2 -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET2"

mkdir -p $TARGET/share
mkdir -p $TARGET/share/zoneinfo
cp ~/7t/zoneinfo/tzdata $TARGET/share/zoneinfo

copyfiles "$SROOT/usr" "$TARGET" '*.idc'
optimize_idc $TARGET/idc
copyfiles "$SROOT/usr" "$TARGET" '*.kcm'
optimize_kcm $TARGET/keychars
optimize_kl $TARGET/keylayout

#======================================================================

emptyapks () {
    TARGET=$MODULE/$1
    echo -e "-- generating $1"
    mkdir -p $TARGET
    for i in $(echo "$2"); do
        # create the directory in $TARGET
        mkdir -p $TARGET/$i
        # put an "empty" apk file there X.apk where X is the same name as the directory
        touch $TARGET/$i/$i.apk
    done
}

#======================================================================
# APKs
# we create empty APK files for the APKs which we want to hide in all APK directories
# originally I tried to bind mount an empty file in service.sh but then
# for some reason multiple mounts are on top of eachother (weird) for /system/app

SUB=system/app
array="AntHalService ARCore_stub Backup BackupRestoreRemoteService BasicDreams BluetoothMidiService BookmarkProvider BTtestmode BuiltInPrintService Calculator CarrierDefaultApp CompanionDeviceManager CtsShimPrebuilt DeskClock EasterEgg_O2 EngineeringMode EngSpecialTest GooglePrintRecommendationService HTMLViewer LiveWallpapersPicker LogKitSdService Netflix_Activation Netflix_Stub NFCTestMode NVBackupUI OemAutoTestServer OEMLogKit OPAppUpgrader OPBackup OPBreathMode OPBugReportLite OPCommonLogTool OPFilemanager OPGamingSpace OPGeoIpTime OPIntelliService OPLiveWallpaper OPMmsLocationFramework OPPush OPScreenRecord OPSesAuthentication OPSoundTuner OPTelephonyDiagnoseManager OPTelephonyOptimization OPWallpaperResources PacProcessor PartnerBookmarksProvider PhotosOnline PlayAutoInstallConfig QColor Rftoolkit SdCardService SensorTestTool SimAppDialog SmscPlugger SoterService Traceur WAPPushManager WallpaperBackup WapiCertManage WifiRfTestApk oem_tcma"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/priv-app
array="BackupRestoreConfirmation CallLogBackup Contacts CtsShimPrivPrebuilt Dialer DynamicSystemInstallationService EmergencyInfo HotwordEnrollmentOKGoogleWCD9340 HotwordEnrollmentXGoogleWCD9340 Houston IFAAService InputDevices LocalTransport ManagedProvisioning MmsService OnePlusGallery ONS OPAppCategoryProvider OPCellBroadcastReceiver OPDeviceManager OPDeviceManagerProvider OPFaceUnlock OPMms OPSimContacts ProxyHandler RcsSDK SharedStorageBackup TagGoogle WfdService"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/product/app
array="CallFeaturesSetting colorservice com.qualcomm.qti.services.secureui ConfURIDialer datastatusnotification DeviceInfo Duo DynamicDDSService embms GoogleLocationHistory TTS imssettings LatinImeGoogle Music2 OPCarrierLocation PerformanceMode QdcmFF remoteSimLockAuthentication remotesimlockservice SimSettings talkback TmoEngMode uceShimService uimgbaservice uimlpaservice uimremoteclient uimremoteserver Videos"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/product/priv-app
array="AndroidAutoStub CarrierConfig ConfigUpdater daxService dpmserviceapp GoogleFeedback GooglePartnerSetup GoogleRestore ims OPAppLocker QAS_DVC_MSP seccamservice StorageManager WallpaperCropper"
emptyapks $SUB "$array" $DUMMYAPK

SUB=system/vendor/app
array="CACertService CneApp com.qualcomm.qti.improvetouch.service IWlanService pasrservice PowerOffAlarm"
emptyapks $SUB "$array" $DUMMYAPK

#======================================================================
# expand modappsq.tar file
# the tar expansion first creates $MODULE/vendor/app
# we move the $MODULE/vendor/app to $MODULE/system/vendor/app
# system/vendor/app
# expand my own APKs

CUR=$(pwd)
cd $MODULE/
if [ "$EXPAPPS" -eq 1 ]; then
    echo -e "-- expanding apps from ~/pro/modappsq.tar"
    tar xf ~/pro/modappsq.tar
    # tar expansion results in vendor/app, we move this into system/vendor/app
    mv $MODULE/vendor/app/* $MODULE/system/vendor/app/
    rm -rf $MODULE/vendor
fi
cd $CUR

#======================================================================
# /system/etc

SUB=system/etc
TARGET=$MODULE/$SUB
# note that the whole system/etc directory is wiped here !
echo -e "-- generating $SUB"
mkdir -p $TARGET

# first copy all *.{xml,proto,conf,json,rc} files which we either want to modify and/or optimize
copyfiles "$SROOT/etc" "$TARGET" '*.xml'
copyfiles "$SROOT/etc" "$TARGET" '*.proto'
copyfiles "$SROOT/etc" "$TARGET" '*.conf'
copyfiles "$SROOT/etc" "$TARGET" '*.json'
copyfiles "$SROOT/etc" "$TARGET" '*.rc'

# empty some files which we do not need
touch $TARGET/usb_drivers.iso
touch $TARGET/NOTICE.xml.gz

# and copy some files which we manually patched
cp ~/7t/etc/*.xml $TARGET
rm -rf $TARGET/apns-conf.xml $TARGET/apns-conf2.xml

# some simple patches
cat $SROOT/etc/permissions/platform.xml | grep -v oppo > $TARGET/permissions/platform.xml

# copy below files but first remove comment lines and empty lines
cat $SROOT/etc/preloaded-classes | grep -v ^# > $TARGET/preloaded-classes
cat $SROOT/etc/dirty-image-objects | grep -v ^# > $TARGET/dirty-image-objects
sudo cat $SROOT/etc/prop.default | grep -v ^# > $TARGET/prop.default
cat $SROOT/etc/ld.config.29.txt | grep -v ^# | sed '/^$/d' > $TARGET/ld.config.29.txt
cat $SROOT/etc/public.libraries.txt | grep -v ^# | sed '/^$/d' > $TARGET/public.libraries.txt
cat $SROOT/etc/vold.fstab | grep -v ^# | sed '/^$/d' > $TARGET/vold.fstab


# init.d and services.d
mkdir -p $TARGET/init.d
mkdir -p $TARGET/services.d
echo -e "   generating init.d and services.d in $SUB"
NUMFILES=$(\ls ~/7t/init.d/LS00* | wc -l)
echo -e "   copying $NUMFILES scripts to $SUB/init.d"
cp ~/7t/init.d/LS00* $TARGET/init.d/
cp ~/7t/init.d/googlewiz.sh $TARGET/init.d/
rm -f $TARGET/init.d/LS00usbfastcharge
NUMFILES=$(\ls ~/7t/init.d/LS99* | wc -l)
echo -e "   copying $NUMFILES scripts to $SUB/services.d"
cp ~/7t/init.d/LS99* $TARGET/services.d/
#not sure why I disabled next line ... I edited the script to absolute minimum hides
#rm -f $TARGET/services.d/LS99magiskhide
chmod 755 $TARGET/init.d/*
chmod 755 $TARGET/services.d/*

# actions
echo -e "   copying hosts files"
cp ~/7t/hosts/* $TARGET
chmod 644 $TARGET/hosts*
cp $TARGET/hosts.medium $TARGET/hosts
# end actions
NUMFILES=$(find $TARGET -name 'hosts*' | wc -l)
echo -e "   created $NUMFILES 'hosts' files in $TARGET"

if [ "$WIZ" == 0 ]; then
    # modified APN file
    # note that to create an orig we need to copy from the original source file in $SROOT
    # note that upon the first setup sequence we use the oneplus standard software
    # that still has the base software and original APN files with the proxy/port for Base and BASE MMS (!!!)
    # so you still need to go in manually in the settings and change the APN
    cp ~/7t/etc/$APNS $TARGET
    echo -e "   copied simplified $APNS to $TARGET"
fi

# note that all .rc files were already copied
# we just need to replace some of them by empty files
# etc/init
SUB1=init
TARGET1=$TARGET/$SUB1
echo -e "   creating $SUB/$SUB1 and empty .rc files"
# actions
for i in atrace.rc bluetooth-events.rc bootstat.rc caffed.rc com.qualcomm.qti.sigma_miracast\@1.0-service.rc dumpstate.rc engineermode.rc flags_health_check.rc heapprofd.rc incidentd.rc iorapd.rc mdnsd.rc perfetto.rc perfservice.rc recovery-persist.rc recovery-refresh.rc rss_hwm_reset.rc sarahd.rc statsd.rc tombstoned.rc traceur.rc uncrypt.rc update_engine.rc update_verifier.rc wfdservice.rc; do
    rm -f $TARGET1/$i
    touch $TARGET1/$i
done
# end actions
NUMFILES=$(find $TARGET1 -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET1"

# etc/permissions
SUB3=permissions
TARGET3=$TARGET/$SUB3
echo -e "   generating $SUB/$SUB3"
mkdir -p $TARGET3
# we should not delete any .xml files in $TARGET3 (as this has been done from system/etc)
# actions
# note that we do not need to copy files from permissions (as these are .xml and have been copied above)
# just add the extra .xml files in permissions
for i in com.google.android.media.effects privapp-permissions-com.android.hotwordenrollment.tgoogle privapp-permissions-google-dpc privapp-permissions-airaudio org.pixelexperience.ambient.play org.pixelexperience.weather.client com.android.systemui com.android.settings android.hardware.vr.high_performance android.hardware.vr.headtracking com.google.android.dialer.support nexus nova pixel_2017 pixel_2017_exclusive privapp-permissions-airaudio gearhead privapp-permissions-philip; do
    cp ~/7t/permissions/$i.xml $TARGET3
done
# make a few XMLs empty
for i in android.test.runner.xml android.test.mock.xml android.test.base.xml; do
    rm -f $TARGET3/$i
    echo '<?xml version="1.0" encoding="utf-8"?><permissions/>' > $TARGET3/$i
done
NUMFILES=$(find $TARGET3 -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET3"

# etc/sysconfig contains "extra" files which we simply copy from ~/7t/etc/
# etc/sysconfig
SUB2=sysconfig
TARGET2=$TARGET/$SUB2
echo -e "   generating $SUB/$SUB2"
mkdir -p $TARGET2
# we should not delete any .xml files in $TARGET2 (as this has been done from system/etc)
# actions
cp ~/7t/sysconfig/* $TARGET2
#end actions
NUMFILES=$(find $TARGET2 -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET2"

# optimize txt file in system/etc
echo "   optimizing $TARGET/qvr/qvrservice_config.txt"
mkdir -p $TARGET/qvr
cat $SROOT/etc/qvr/qvrservice_config.txt  | grep -v ^# | sed '/^$/d' > $TARGET/qvr/qvrservice_config.txt

# add bash
echo -e "   adding bash shell"
mkdir -p $TARGET/bash
cp ~/7t/bash/bashrc $TARGET/bash
cp ~/7t/bash/bash_aliases $TARGET/bash
cp ~/7t/bash/mkshrc $TARGET
chmod 755 $TARGET/mkshrc

# optimize in system/etc
cd $TARGET
optimize_xml $TARGET
optimize_json $TARGET
optimize_conf $TARGET
optimize_proto $TARGET
optimize_rc $TARGET

cd $MODULE

#======================================================================
# /system/fonts

SUB=system/fonts
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB"
mkdir -p $TARGET
# empty the Slate and MY* font files
# removing NotoSans* files results in a slow boot
for i in SlateForOnePlus-Black.ttf SlateForOnePlus-Bold.ttf SlateForOnePlus-Book.ttf SlateForOnePlus-Light.ttf SlateForOnePlus-Medium. SlateForOnePlus-Regular.ttf SlateForOnePlus-Thin.ttf MYingHeiHKForOnePlus-W4.ttf MYingHeiPRC-W2.ttf MYingHeiPRC-W3.ttf MYingHeiPRC-W4.ttf MYingHeiPRC-W5.ttf MYingHeiPRC-W7.ttf MYingHeiPRC-W8.ttf; do
    touch $TARGET/$i
done
NUMFILES=$(find $TARGET -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET"
rm -f $MODULE/system/etc/fonts_slate.xml
touch $MODULE/system/etc/fonts_slate.xml
echo '<?xml version="1.0" encoding="utf-8"?>' >> $MODULE/system/etc/fonts_slate.xml
echo '<familyset version="23">' >> $MODULE/system/etc/fonts_slate.xml
echo '</familyset>' >> $MODULE/system/etc/fonts_slate.xml
echo -e "   created $MODULE/system/etc/fonts_slate.xml"

#======================================================================
# /system/bpm

# this is the only directory (system/product/vendor) which contains xml files outside of etc subdirectory
SUB=system/bpm
TARGET=$MODULE/$SUB
echo -e "-- generating $SUB"
mkdir -p $TARGET
cp ~/7t/bpm/*.xml $TARGET/
NUMFILES=$(find $TARGET -type f | wc -l)
echo -e "   created $NUMFILES files in $TARGET"

#======================================================================
# /vendor

SUB=system/vendor
TARGET=$MODULE/$SUB
mkdir -p $TARGET
echo -e "-- generating $SUB"

#=====================
# /vendor/build.prop
PFILE=build.prop
# copy original build.prop and remove comments and empty lines
echo "   generating $TARGET/$PFILE from $VROOT/$PFILE"
sudo cat $VROOT/$PFILE | grep -v ^# | sed '/^$/d' | sort > $TARGET/$PFILE
# changing properties
declare -a props=(
    's/ro.com.android.dataroaming=false/ro.com.android.dataroaming=true/g'
    's/ro.hwui.use_vulkan=/ro.hwui.use_vulkan=true/g'
)
for i in ${props[@]}; do
    cat $TARGET/$PFILE | sed $i > /tmp/$PFILE
    cp /tmp/$PFILE $TARGET/$PFILE
done
declare -a props=(
    none
)
# removing properties
for i in ${props[@]}; do
    cat $TARGET/$PFILE | grep -v $i > /tmp/$PFILE
    cp /tmp/$PFILE $TARGET/$PFILE
done

#=====================
# /vendor/default.prop
PFILE=default.prop
# copy original $PFILE and remove comments and empty lines
echo "   generating $TARGET/$PFILE from $VROOT/$PFILE"
sudo cat $VROOT/$PFILE | grep -v ^# | sed '/^$/d' | sort > $TARGET/$PFILE
# changing properties
declare -a props=(
    's/ro.adb.secure=1/ro.adb.secure=0/g'
)
for i in ${props[@]}; do
    cat $TARGET/$PFILE | sed $i > /tmp/$PFILE
    cp /tmp/$PFILE $TARGET/$PFILE
done
declare -a props=(
    log.tag.stats_log=I
)
# removing properties
for i in ${props[@]}; do
    cat $TARGET/$PFILE | grep -v $i > /tmp/$PFILE
    cp /tmp/$PFILE $TARGET/$PFILE
done

#=====================
# /vendor/ueventd.rc
# this is the only file outside 'etc' subdirectory which is an rc file
echo "   generating $TARGET/ueventd.rc from $VROOT/ueventd.rc"
sudo cat $VROOT/ueventd.rc | grep -v ^# | sed '/^$/d' | sort > $TARGET/ueventd.rc

#=====================
# /vendor/radio (.sql files)
SUB0=radio
TARGET0=$TARGET/radio
echo -e "   generating $SUB/$SUB0"
mkdir -p $TARGET0
# copy .sql files and optimize them
copyfiles "$VROOT/radio" "$TARGET0" '*.sql'
optimize_sql "$TARGET0"

#=====================
# /vendor/etc
SUB1=etc
TARGET1=$TARGET/$SUB1
echo -e "   generating $SUB/$SUB1"
mkdir -p $TARGET1

# copy .xml, .conf, .json, .rc files (those we optimize)
copyfiles "$VROOT/etc" "$TARGET1" '*.xml'
copyfiles "$VROOT/etc" "$TARGET1" '*.conf'
copyfiles "$VROOT/etc" "$TARGET1" '*.json'
copyfiles "$VROOT/etc" "$TARGET1" '*.rc'
copyfiles "$VROOT/etc" "$TARGET1" '*.ini'

# 3 special json files which were hand edited
# the first 2 contain C style comments, the last file has a syntax error in the original SW
echo "   copying json files from ~7t/json"
cp ~/7t/json/ta_config.json $TARGET1/ssg/
cp ~/7t/json/tz_whitelist.json $TARGET1/ssg/
cp ~/7t/json/sns_mag_cal_legacy.json $TARGET1/sensors/config/

# there are a few weird XML files that fail validation, fix them
echo "   fixing $TARGET1/data/dsi_config.xml and $TARGET1/data/netmgr_config.xml"
cat $TARGET1/data/dsi_config.xml | tail -n +8 > /tmp/foo.xml
cp /tmp/foo.xml $TARGET1/data/dsi_config.xml
cat $TARGET1/data/netmgr_config.xml | tail -n +8 > /tmp/foo.xml
cp /tmp/foo.xml $TARGET1/data/netmgr_config.xml

# wifi bonding
# note:
# BandCapability=0 (both 2.4ghz and 5ghz)
# BandCapability=1 (only 2.4ghz)
# BandCapability=2 (only 5ghz)
echo "   changes for WIFI channel bonding"
if [ -f $TARGET1/wifi/WCNSS_qcom_cfg.ini ]; then
    sed -i '/BandCapability=/d;/gChannelBondingMode24GHz=/d;/gChannelBondingMode5GHz=/d;/gForce1x1Exception=/d;s/^END$/gChannelBondingMode24GHz=1\ngChannelBondingMode5GHz=1\ngForce1x1Exception=0\nBandCapability=0\nEND/g' $TARGET1/wifi/WCNSS_qcom_cfg.ini
fi

# and we want to empty the .rc file which starts dolby as it crashes !
echo "   emptying $TARGET1/init/vendor.dolby.hardware.dms@1.0-service.rc file (causes crash)"
rm -f $TARGET1/init/vendor.dolby.hardware.dms\@1.0-service.rc
touch $TARGET1/init/vendor.dolby.hardware.dms\@1.0-service.rc

echo "   copying mixer paths"
# copy sound paths (increased volume)
cp ~/7t/etc/mixer_paths_tavil.xml $TARGET1
cp ~/7t/etc/mixer_paths_pahu.xml $TARGET1

cd $MODULE
 
# clear the majority of the nfc related files in the vendor/etc directory
for i in libnfc-nci_beijingbus.conf libnfc-nci_changancard.conf libnfc-nci_shenzhentong.conf libnfc-nci_suzhoutong.conf libnfc-nci_wuhantong.conf libnfc-nci_yangchengtong.conf libnfc-nci_zhengzhoubus.conf libnfc-nxp_RF_beijingbus.conf libnfc-nxp_RF_changancard.conf libnfc-nxp_RF_shenzhentong.conf libnfc-nxp_RF_suzhoutong.conf libnfc-nxp_RF_wuhantong.conf libnfc-nxp_RF_yangchengtong.conf libnfc-nxp_RF_zhengzhoubus.conf libnfc-nxp_beijingbus.conf libnfc-nxp_changancard.conf libnfc-nxp_shenzhentong.conf libnfc-nxp_suzhoutong.conf libnfc-nxp_wuhantong.conf libnfc-nxp_yangchengtong.conf libnfc-nxp_zhengzhoubus.conf libnfc-nci_beijingbus.conf libnfc-nci_changancard.conf libnfc-nci_productline.conf libnfc-nci_shenzhentong.conf libnfc-nci_suzhoutong.conf libnfc-nci_wuhantong.conf libnfc-nci_yangchengtong.conf libnfc-nci_zhengzhoubus.conf libnfc-nxp_RF_beijingbus.conf libnfc-nxp_RF_changancard.conf libnfc-nxp_RF_shenzhentong.conf libnfc-nxp_RF_suzhoutong.conf libnfc-nxp_RF_wuhantong.conf libnfc-nxp_RF_yangchengtong.conf libnfc-nxp_RF_zhengzhoubus.conf libnfc-nxp_beijingbus.conf libnfc-nxp_changancard.conf libnfc-nxp_shenzhentong.conf libnfc-nxp_suzhoutong.conf libnfc-nxp_wuhantong.conf libnfc-nxp_yangchengtong.conf libnfc-nxp_zhengzhoubus.conf; do
    rm $TARGET1/$i
    touch $TARGET1/$i
done

# files which we want to have empty or modify a bit
touch $TARGET1/NOTICE.xml.gz
cat $VROOT/etc/fstab.qcom | grep -v ^# | sed '/^$/d' > $TARGET1/fstab.qcom
cat $VROOT/etc/fstab_nodata.qcom | grep -v ^# | sed '/^$/d' > $TARGET1/fstab_nodata.qcom
cat $VROOT/etc/ArmHDCP_QTI_Android.cfg | grep -v ^# | sed '/^$/d' | sed 's/EnableLogs=True/EnableLogs=False/g' | sed 's/DebugLevel=10/DebugLevel=0/g' | sed 's/LogcatLogs=True/LogcatLogs=False/g' > $TARGET1/ArmHDCP_QTI_Android.cfg
cat $VROOT/etc/DxHDCP.cfg | grep -v ^# | sed '/^$/d' | sed 's/EnableLogs=True/EnableLogs=False/g' | sed 's/DebugLevel=60/DebugLevel=0/g' | sed 's/LogcatLogs=True/LogcatLogs=False/g' > $TARGET1/DxHDCP.cfg

#=====================
# bin
SUB2=bin
TARGET2=$TARGET/$SUB2
echo -e "   generating $SUB/$SUB2"
mkdir -p $TARGET2

for i in audioflacapp ATFWD-daemon OPNetlinkService host_manager_11ad wfdvndservice wifi_diag wifidisplayhalservice wifilearner wigig_wiburn wigighalsvc wigignpt diag_callback_sample diag_dci_sample qseecom_sample_client secure_ui_sample_client athdiag cnss_diag diag_klog diag_mdlog diag_uart_log ipacm-diag ssr_diag test_diag fmfactorytest fmfactorytestserver ftmtest mm-vidc-omx-test oemnvbkdaemon oem-system-daemon qmi_simple_ril_test dump_sniffer.sh launch_sniffer.sh terminate_sniffer.sh shell_11ad hostapd_cli cnd init.qcom.crashdata.sh; do
    rm -rf $TARGET2/$i
    touch $TARGET2/$i
done
NUMFILES=$(find $TARGET2 -type f | wc -l)
echo -e "   created $NUMFILES files in $SUB/$SUB2"

# empty binaries in vendor/bin/hw
mkdir -p $TARGET2/hw
for i in android.hardware.atrace\@1.0-service android.hardware.neuralnetworks\@1.2-service-qti vendor.dolby.hardware.dms\@1.0-service vendor.oneplus.engnative.engineer\@1.0-service vendor.oneplus.faceunlock.hal\@1.0-service vendor.qti.hardware.soter\@1.0-service; do
    rm -f $TARGET2/hw/$i
    touch $TARGET2/hw/$i
done
NUMFILES=$(find $TARGET2/hw -type f | wc -l)
echo "   emptied $NUMFILES files in $TARGET2/hw"

#=====================
# optimize
cd $TARGET
optimize_xml $TARGET
optimize_json $TARGET
optimize_conf $TARGET
optimize_rc $TARGET
optimize_ini $TARGET

cd $MODULE

#======================================================================
# /product: 2 overlays, optimize XMLs, optimize .conf files

SUB=system/product
TARGET=$MODULE/$SUB
mkdir -p $TARGET
echo -e "-- generating $SUB"

#=====================
# /product/build.prop
# note that this does NOT work
# I think the build.prop file is processed and then
# the mount /sbin/.magisk/block/data on /product/build.prop is happening
# so on the system we see the modified build.prop but it has not been processed
# all properties which need changing need to go in $MODULE/system.prop

PFILE=build.prop
# copy original build.prop and remove comments and empty lines
echo "   generating $TARGET/$PFILE from $PROOT/$PFILE"
sudo cat $PROOT/$PFILE | grep -v ^# | sed '/^$/d' | sort > $TARGET/$PFILE
# changing properties
declare -a props=(
    's/ro.opa.eligible_device=true/ro.opa.eligible_device=true/g'
)
for i in ${props[@]}; do
    cat $TARGET/$PFILE | sed $i > /tmp/$PFILE
    cp /tmp/$PFILE $TARGET/$PFILE
done
# removing properties
declare -a props=(
    none
)
for i in ${props[@]}; do
    cat $TARGET/$PFILE | grep -v $i > /tmp/$PFILE
    cp /tmp/$PFILE $TARGET/$PFILE
done

#=====================
# /product/etc
SUB1=etc
TARGET1=$TARGET/$SUB1
echo -e "   generating $SUB/$SUB1"
mkdir -p $TARGET1

copyfiles "$PROOT/etc" "$TARGET1" '*.xml'
copyfiles "$PROOT/etc" "$TARGET1" '*.conf'
copyfiles "$PROOT/etc" "$TARGET1" '*.rc'

# create a file of bind mounts for product/etc which we use in the service.sh script
# the file is placed at the top of the module
rm -f $MODULE/bind-mounts-product-etc
touch $MODULE/bind-mounts-product-etc
echo "# do not remove, this file is generated by $0" >> $MODULE/bind-mounts-product-etc
echo "# bind mounts for .xml, .conf, .rc files inside /product/etc directory" >> $MODULE/bind-mounts-product-etc
echo -e "   generating file $MODULE/bind-mounts-product-etc"
CUR=$(pwd)
cd $PROOT/etc
# remove the pending './'
find . -type f -name '*.xml' | sed 's%\.\/%%g' >> $MODULE/bind-mounts-product-etc
find . -type f -name '*.conf' | sed 's%\.\/%%g' >> $MODULE/bind-mounts-product-etc
find . -type f -name '*.rc' | sed 's%\.\/%%g' >> $MODULE/bind-mounts-product-etc

if [ "$WIZ" == 0 ]; then
    # modified APN file (note that original file was already copied from source using copyfiles above)
    # actually this does NOT work, "adding" a file in product/etc messes up magisk (!)
    # next line does not work therefore
    # cp $TARGET1/$APNS $TARGET1/$APNS.orig
    cp ~/7t/etc/$APNS2 $TARGET1/$APNS
    echo -e "   copied simplified $APNS2 to $TARGET1/$APNS"
fi

# there are 2 XML files which have version="2.0", change this to version="1.0" other wise xml-optimize emtpies the files
cat $PROOT/etc/permissions/vendor.qti.hardware.data.connection-V1.0-java.xml | sed 's/version="2.0"/version="1.0"/g' > $TARGET1/permissions/vendor.qti.hardware.data.connection-V1.0-java.xml
cat $PROOT/etc/permissions/vendor.qti.hardware.data.connection-V1.1-java.xml | sed 's/version="2.0"/version="1.0"/g' > $TARGET1/permissions/vendor.qti.hardware.data.connection-V1.1-java.xml

#=====================
# /product/overlay
SUB2=overlay
TARGET2=$TARGET/$SUB2
echo -e "   generating $SUB/$SUB2"
mkdir -p $TARGET2
echo -e "   copying 4 overlays into $SUB/$SUB2"
cp ~/7t/overlay/MyOverlayQSTiles5Col4Rows.apk $TARGET2
cp ~/7t/overlay/MyOverlayWhiteFingerPrint.apk $TARGET2
cp ~/7t/overlay/MyOverlayStatusbarIcons.apk $TARGET2
cp ~/7t/overlay/MyOverlayTilesIcons.apk $TARGET2
chmod 644 $TARGET2/*

#=====================
# optimize
cd $TARGET
optimize_xml $TARGET
optimize_conf $TARGET
optimize_rc $TARGET

cd $MODULE

#======================================================================
# make sure there is no crap left behind
find . -type f -name '*~' -exec rm -f {} \;
find . -type f -name '#*' -exec rm -f {} \;

#======================================================================
# final validation on all XML files
NUMFILES=$(find . -type f -name '*.xml' | wc -l)
echo -e "-- validating $NUMFILES XML files"
find $MODULE -type f -name '*.xml' -exec xmlstarlet val {} \; | grep -v '\- valid'


#======================================================================
# generate a file with bind-mounts to the APK directories in extra

# create a file of bind mounts for product/etc which we use in the service.sh script
# the file is placed at the top of the module
# it contains <pkg-name>:<subdir-in-extra>
rm -f $MODULE/bind-mounts-extra
touch $MODULE/bind-mounts-extra
echo "# do not remove, this file is generated by $0" >> $MODULE/bind-mounts-extra
echo "# the APKs in the directories will be 1-off installed as 'updates' via LS99installpackages" >> $MODULE/bind-mounts-extra
echo -e "-- generating file $MODULE/bind-mounts-extra"

for i in $(find $MODULE/extra -maxdepth 3 -mindepth 3 | sed "s%$MODULE/extra/%%g"); do
    PKGNAME=$(apkdump $MODULE/extra/$i/*.apk | awk '{print $3}' | sed s%\'%%g | sed 's/name=//g')
    echo "$PKGNAME:$i" >> $MODULE/bind-mounts-extra
done

#======================================================================

rm -f $MODULE/googlewiz
if [ "$WIZ" == 1 ]; then
    echo "-- we're generating the googlewiz version"
    touch $MODULE/googlewiz
    rm -rf system/vendor/app/MySystemInfo/
    rm -rf system/vendor/app/MyLauncherKey/
    rm -rf system/vendor/app/MyCalendarWidget/
    rm -f system/etc/services.d/LS99osmand
    rm -f system/etc/services.d/LS99mountmusic
    cp $PROOT/etc/apns-conf.xml $MODULE/system/product/etc/
    cp $SROOT/etc/apns-conf.xml $MODULE/system/etc/
fi

#======================================================================

if [ "$NOMODULE" -eq 1 ]; then
    echo -e "-- not building module ('nomodule' option was given on command line)"
    exit 0
fi

echo -e "-- building module from directory $MODULE (version: $NEWVER)"
zip -r $MODULEZIP "." > /dev/null
sync
echo -e "-- pushing $MODULEZIP to device"
adb push $MODULEZIP /sdcard/


exit 0
